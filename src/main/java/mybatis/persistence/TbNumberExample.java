package mybatis.persistence;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class TbNumberExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public TbNumberExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		public Criteria andNTinyIsNull() {
			addCriterion("n_tiny is null");
			return (Criteria) this;
		}

		public Criteria andNTinyIsNotNull() {
			addCriterion("n_tiny is not null");
			return (Criteria) this;
		}

		public Criteria andNTinyEqualTo(Byte value) {
			addCriterion("n_tiny =", value, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyNotEqualTo(Byte value) {
			addCriterion("n_tiny <>", value, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyGreaterThan(Byte value) {
			addCriterion("n_tiny >", value, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyGreaterThanOrEqualTo(Byte value) {
			addCriterion("n_tiny >=", value, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyLessThan(Byte value) {
			addCriterion("n_tiny <", value, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyLessThanOrEqualTo(Byte value) {
			addCriterion("n_tiny <=", value, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyIn(List<Byte> values) {
			addCriterion("n_tiny in", values, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyNotIn(List<Byte> values) {
			addCriterion("n_tiny not in", values, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyBetween(Byte value1, Byte value2) {
			addCriterion("n_tiny between", value1, value2, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNTinyNotBetween(Byte value1, Byte value2) {
			addCriterion("n_tiny not between", value1, value2, "nTiny");
			return (Criteria) this;
		}

		public Criteria andNSmallIsNull() {
			addCriterion("n_small is null");
			return (Criteria) this;
		}

		public Criteria andNSmallIsNotNull() {
			addCriterion("n_small is not null");
			return (Criteria) this;
		}

		public Criteria andNSmallEqualTo(Short value) {
			addCriterion("n_small =", value, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallNotEqualTo(Short value) {
			addCriterion("n_small <>", value, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallGreaterThan(Short value) {
			addCriterion("n_small >", value, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallGreaterThanOrEqualTo(Short value) {
			addCriterion("n_small >=", value, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallLessThan(Short value) {
			addCriterion("n_small <", value, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallLessThanOrEqualTo(Short value) {
			addCriterion("n_small <=", value, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallIn(List<Short> values) {
			addCriterion("n_small in", values, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallNotIn(List<Short> values) {
			addCriterion("n_small not in", values, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallBetween(Short value1, Short value2) {
			addCriterion("n_small between", value1, value2, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNSmallNotBetween(Short value1, Short value2) {
			addCriterion("n_small not between", value1, value2, "nSmall");
			return (Criteria) this;
		}

		public Criteria andNMediunIsNull() {
			addCriterion("n_mediun is null");
			return (Criteria) this;
		}

		public Criteria andNMediunIsNotNull() {
			addCriterion("n_mediun is not null");
			return (Criteria) this;
		}

		public Criteria andNMediunEqualTo(Integer value) {
			addCriterion("n_mediun =", value, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunNotEqualTo(Integer value) {
			addCriterion("n_mediun <>", value, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunGreaterThan(Integer value) {
			addCriterion("n_mediun >", value, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunGreaterThanOrEqualTo(Integer value) {
			addCriterion("n_mediun >=", value, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunLessThan(Integer value) {
			addCriterion("n_mediun <", value, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunLessThanOrEqualTo(Integer value) {
			addCriterion("n_mediun <=", value, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunIn(List<Integer> values) {
			addCriterion("n_mediun in", values, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunNotIn(List<Integer> values) {
			addCriterion("n_mediun not in", values, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunBetween(Integer value1, Integer value2) {
			addCriterion("n_mediun between", value1, value2, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNMediunNotBetween(Integer value1, Integer value2) {
			addCriterion("n_mediun not between", value1, value2, "nMediun");
			return (Criteria) this;
		}

		public Criteria andNIntIsNull() {
			addCriterion("n_int is null");
			return (Criteria) this;
		}

		public Criteria andNIntIsNotNull() {
			addCriterion("n_int is not null");
			return (Criteria) this;
		}

		public Criteria andNIntEqualTo(Integer value) {
			addCriterion("n_int =", value, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntNotEqualTo(Integer value) {
			addCriterion("n_int <>", value, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntGreaterThan(Integer value) {
			addCriterion("n_int >", value, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntGreaterThanOrEqualTo(Integer value) {
			addCriterion("n_int >=", value, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntLessThan(Integer value) {
			addCriterion("n_int <", value, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntLessThanOrEqualTo(Integer value) {
			addCriterion("n_int <=", value, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntIn(List<Integer> values) {
			addCriterion("n_int in", values, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntNotIn(List<Integer> values) {
			addCriterion("n_int not in", values, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntBetween(Integer value1, Integer value2) {
			addCriterion("n_int between", value1, value2, "nInt");
			return (Criteria) this;
		}

		public Criteria andNIntNotBetween(Integer value1, Integer value2) {
			addCriterion("n_int not between", value1, value2, "nInt");
			return (Criteria) this;
		}

		public Criteria andNBigIsNull() {
			addCriterion("n_big is null");
			return (Criteria) this;
		}

		public Criteria andNBigIsNotNull() {
			addCriterion("n_big is not null");
			return (Criteria) this;
		}

		public Criteria andNBigEqualTo(Long value) {
			addCriterion("n_big =", value, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigNotEqualTo(Long value) {
			addCriterion("n_big <>", value, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigGreaterThan(Long value) {
			addCriterion("n_big >", value, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigGreaterThanOrEqualTo(Long value) {
			addCriterion("n_big >=", value, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigLessThan(Long value) {
			addCriterion("n_big <", value, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigLessThanOrEqualTo(Long value) {
			addCriterion("n_big <=", value, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigIn(List<Long> values) {
			addCriterion("n_big in", values, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigNotIn(List<Long> values) {
			addCriterion("n_big not in", values, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigBetween(Long value1, Long value2) {
			addCriterion("n_big between", value1, value2, "nBig");
			return (Criteria) this;
		}

		public Criteria andNBigNotBetween(Long value1, Long value2) {
			addCriterion("n_big not between", value1, value2, "nBig");
			return (Criteria) this;
		}

		public Criteria andNFloatIsNull() {
			addCriterion("n_float is null");
			return (Criteria) this;
		}

		public Criteria andNFloatIsNotNull() {
			addCriterion("n_float is not null");
			return (Criteria) this;
		}

		public Criteria andNFloatEqualTo(Float value) {
			addCriterion("n_float =", value, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatNotEqualTo(Float value) {
			addCriterion("n_float <>", value, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatGreaterThan(Float value) {
			addCriterion("n_float >", value, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatGreaterThanOrEqualTo(Float value) {
			addCriterion("n_float >=", value, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatLessThan(Float value) {
			addCriterion("n_float <", value, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatLessThanOrEqualTo(Float value) {
			addCriterion("n_float <=", value, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatIn(List<Float> values) {
			addCriterion("n_float in", values, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatNotIn(List<Float> values) {
			addCriterion("n_float not in", values, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatBetween(Float value1, Float value2) {
			addCriterion("n_float between", value1, value2, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNFloatNotBetween(Float value1, Float value2) {
			addCriterion("n_float not between", value1, value2, "nFloat");
			return (Criteria) this;
		}

		public Criteria andNDobleIsNull() {
			addCriterion("n_doble is null");
			return (Criteria) this;
		}

		public Criteria andNDobleIsNotNull() {
			addCriterion("n_doble is not null");
			return (Criteria) this;
		}

		public Criteria andNDobleEqualTo(Double value) {
			addCriterion("n_doble =", value, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleNotEqualTo(Double value) {
			addCriterion("n_doble <>", value, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleGreaterThan(Double value) {
			addCriterion("n_doble >", value, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleGreaterThanOrEqualTo(Double value) {
			addCriterion("n_doble >=", value, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleLessThan(Double value) {
			addCriterion("n_doble <", value, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleLessThanOrEqualTo(Double value) {
			addCriterion("n_doble <=", value, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleIn(List<Double> values) {
			addCriterion("n_doble in", values, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleNotIn(List<Double> values) {
			addCriterion("n_doble not in", values, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleBetween(Double value1, Double value2) {
			addCriterion("n_doble between", value1, value2, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDobleNotBetween(Double value1, Double value2) {
			addCriterion("n_doble not between", value1, value2, "nDoble");
			return (Criteria) this;
		}

		public Criteria andNDecimalIsNull() {
			addCriterion("n_decimal is null");
			return (Criteria) this;
		}

		public Criteria andNDecimalIsNotNull() {
			addCriterion("n_decimal is not null");
			return (Criteria) this;
		}

		public Criteria andNDecimalEqualTo(BigDecimal value) {
			addCriterion("n_decimal =", value, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalNotEqualTo(BigDecimal value) {
			addCriterion("n_decimal <>", value, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalGreaterThan(BigDecimal value) {
			addCriterion("n_decimal >", value, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalGreaterThanOrEqualTo(BigDecimal value) {
			addCriterion("n_decimal >=", value, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalLessThan(BigDecimal value) {
			addCriterion("n_decimal <", value, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalLessThanOrEqualTo(BigDecimal value) {
			addCriterion("n_decimal <=", value, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalIn(List<BigDecimal> values) {
			addCriterion("n_decimal in", values, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalNotIn(List<BigDecimal> values) {
			addCriterion("n_decimal not in", values, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("n_decimal between", value1, value2, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNDecimalNotBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("n_decimal not between", value1, value2, "nDecimal");
			return (Criteria) this;
		}

		public Criteria andNNumericIsNull() {
			addCriterion("n_numeric is null");
			return (Criteria) this;
		}

		public Criteria andNNumericIsNotNull() {
			addCriterion("n_numeric is not null");
			return (Criteria) this;
		}

		public Criteria andNNumericEqualTo(BigDecimal value) {
			addCriterion("n_numeric =", value, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericNotEqualTo(BigDecimal value) {
			addCriterion("n_numeric <>", value, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericGreaterThan(BigDecimal value) {
			addCriterion("n_numeric >", value, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericGreaterThanOrEqualTo(BigDecimal value) {
			addCriterion("n_numeric >=", value, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericLessThan(BigDecimal value) {
			addCriterion("n_numeric <", value, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericLessThanOrEqualTo(BigDecimal value) {
			addCriterion("n_numeric <=", value, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericIn(List<BigDecimal> values) {
			addCriterion("n_numeric in", values, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericNotIn(List<BigDecimal> values) {
			addCriterion("n_numeric not in", values, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("n_numeric between", value1, value2, "nNumeric");
			return (Criteria) this;
		}

		public Criteria andNNumericNotBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("n_numeric not between", value1, value2, "nNumeric");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table TB_NUMBER
	 * @mbggenerated  Fri Dec 14 11:40:48 CST 2018
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table TB_NUMBER
     *
     * @mbggenerated do_not_delete_during_merge Fri Dec 14 09:55:13 CST 2018
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}